// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    // Structure to represent a student
    struct Student {
        uint256 studentId;
        string name;
        uint256 age;
    }

    // Array to store student records, marked as private to avoid autogenerated getter
    Student[] private students;

    // Fallback function to receive ether
    receive() external payable {
        // This fallback function can be used to receive funds
    }

    // Add a new student record
    function addStudent(uint256 _studentId, string memory _name, uint256 _age) public {
        Student memory newStudent = Student(_studentId, _name, _age);
        students.push(newStudent);
    }

    // Get the number of students
    function getNumberOfStudents() public view returns (uint256) {
        return students.length;
    }

    // Get student details by index
    function getStudentByIndex(uint256 _index) public view returns (uint256, string memory, uint256) {
        require(_index < students.length, "Invalid index");
        Student memory student = students[_index];
        return (student.studentId, student.name, student.age);
    }

    // Update student details by index
    function updateStudent(uint256 _index, string memory _newName, uint256 _newAge) public {
        require(_index < students.length, "Invalid index");
        Student storage student = students[_index];
        student.name = _newName;
        student.age = _newAge;
    }
}